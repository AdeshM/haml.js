// Generated by uRequire v0.6.10 - template: 'combined'
// Combined template optimized with RequireJS/r.js v2.1.10 & almond.
(function (global, window){

var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;

  var __nodeRequire = (__isNode ? require :
      function(dep){
        throw new Error("uRequire detected missing dependency: '" + dep + "' - in a non-nodejs runtime. All it's binding variables were 'undefined'.")
      });
var bundleFactory = function() {
/**
 * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice,
        jsSuffixRegExp = /\.js$/;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);
                name = name.split('/');
                lastIndex = name.length - 1;

                // Node .js allowance:
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                name = baseParts.concat(name);

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }

            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("almond", function(){});

define('fs',[],function () {
  if (__isNode) {
  return __nodeRequire('fs');
} else {
  throw new Error("uRequire: trying to access unbound / excluded 'node-only' dependency 'fs') on browser");
}
});
define('haml',['require','exports','module','fs'],function (require, exports, module) {


var HAML = {};
HAML.version = "0.6.1";
HAML.cache = {};
HAML.errorContextLength = 15;
HAML.selfClosing = [
  "meta",
  "img",
  "link",
  "br",
  "hr",
  "input",
  "area",
  "base"
];
HAML.doctypes = {
  "5": "<!DOCTYPE html>",
  "xml": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>",
  "default": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">",
  "strict": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
  "frameset": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">",
  "1.1": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">",
  "basic": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">",
  "mobile": "<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">"
};
HAML.filters = {
  plain: function (str, buf) {
    buf.push(str);
  },
  cdata: function (str, buf) {
    buf.push("<![CDATA[\n" + str + "\n]]>");
  },
  javascript: function (str, buf) {
    buf.push("<script type=\"text/javascript\">\n//<![CDATA[\n" + str + "\n//]]></script>");
  }
};
var HamlError = HAML.HamlError = function (msg) {
    this.name = "HamlError";
    this.message = msg;
    Error.captureStackTrace(this, HAML.render);
  };
HamlError.super_ = Error;
HamlError.prototype = Object.create(Error.prototype, {
  constructor: {
    value: HamlError,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
var rules = {
    indent: /^\n( *)(?! *-#)/,
    conditionalComment: /^\/(\[[^\n]+\])/,
    comment: /^\n? *\/ */,
    silentComment: /^\n? *-#([^\n]*)/,
    doctype: /^!!! *([^\n]*)/,
    escape: /^\\(.)/,
    filter: /^:(\w+) */,
    each: /^\- *each *(\w+)(?: *, *(\w+))? * in ([^\n]+)/,
    code: /^\-([^\n]+)/,
    outputCode: /^!=([^\n]+)/,
    escapeCode: /^=([^\n]+)/,
    attrs: /^\{(.*?)\}/,
    tag: /^%([-a-zA-Z][-a-zA-Z0-9:]*)/,
    class: /^\.([\w\-]+)/,
    id: /^\#([\w\-]+)/,
    text: /^([^\n]+)/
  };
function context(str) {
  return String(str).substr(0, HAML.errorContextLength).replace(/\n/g, "\\n");
}
function tokenize(str) {
  var captures, token, tokens = [], line = 1, lastIndents = 0, str = String(str).trim().replace(/\r\n|\r|\n *\n/g, "\n");
  function error(msg) {
    throw new HamlError("(Haml):" + line + " " + msg);
  }
  while (str.length) {
    for (var type in rules)
      if (captures = rules[type].exec(str)) {
        token = {
          type: type,
          line: line,
          match: captures[0],
          val: captures.length > 2 ? captures.slice(1) : captures[1]
        };
        str = str.substr(captures[0].length);
        if (type === "indent")
          ++line;
        else
          break;
        var indents = token.val.length / 2;
        if (indents % 1)
          error("invalid indentation; got " + token.val.length + " spaces, should be multiple of 2");
        else if (indents - 1 > lastIndents)
          error("invalid indentation; got " + indents + ", when previous was " + lastIndents);
        else if (lastIndents > indents)
          while (lastIndents-- > indents)
            tokens.push({
              type: "outdent",
              line: line
            });
        else if (lastIndents !== indents)
          tokens.push({
            type: "indent",
            line: line
          });
        else
          tokens.push({
            type: "newline",
            line: line
          });
        lastIndents = indents;
      }
    if (token) {
      if (token.type !== "silentComment")
        tokens.push(token);
      token = null;
    } else
      error("near \"" + context(str) + "\"");
  }
  return tokens.concat({ type: "eof" });
}
var Parser = HAML.Parser = function (str, options) {
    options = options || {};
    this.tokens = tokenize(str);
    this.xml = options.xml;
  };
Parser.prototype = {
  get peek() {
    return this.tokens[0];
  },
  get advance() {
    return this.current = this.tokens.shift();
  },
  get outdent() {
    switch (this.peek.type) {
    case "eof":
      return;
    case "outdent":
      return this.advance;
    default:
      throw new HamlError("expected outdent, got " + this.peek.type);
    }
  },
  get text() {
    var text = this.advance.val.trim();
    text = text.replace(/#\{(.*)\}/, "\" + $1 + \"");
    this.buffer(text);
  },
  get block() {
    this.advance;
    while (this.peek.type !== "outdent" && this.peek.type !== "eof")
      this.expr;
    this.outdent;
  },
  get textBlock() {
    var token, indents = 1;
    this.advance;
    while (this.peek.type !== "eof" && indents)
      switch ((token = this.advance).type) {
      case "newline":
        this.buffer("\\n" + Array(indents).join("  ") + "");
        break;
      case "indent":
        ++indents;
        this.buffer("\\n" + Array(indents).join("  ") + "");
        break;
      case "outdent":
        --indents;
        if (indents === 1)
          this.buffer("\\n");
        break;
      default:
        this.buffer(token.match.replace(/"/g, "\\\""));
      }
  },
  get attrs() {
    var attrs = [
        "attrs",
        "class",
        "id"
      ], buf = [];
    while (attrs.indexOf(this.peek.type) !== -1)
      switch (this.peek.type) {
      case "id":
        buf.push("{ id: \"" + this.advance.val + "\" }");
        break;
      case "class":
        buf.push("{ class: \"" + this.advance.val + "\" }");
        break;
      case "attrs":
        buf.push("{ " + this.advance.val.replace(/(for) *:/gi, "\"$1\":") + " }");
      }
    return buf.length ? " \" + attrs([" + buf.join(", ") + "]) + \"" : "";
  },
  get tag() {
    var tag = this.advance.val, selfClosing = !this.xml && HAML.selfClosing.indexOf(tag) !== -1;
    this.buffer("\\n<" + tag + this.attrs + (selfClosing ? "/>" : ">"));
    switch (this.peek.type) {
    case "text":
      this.text;
      break;
    case "conditionalComment":
      this.conditionalComment;
      break;
    case "comment":
      this.comment;
      break;
    case "outputCode":
      this.outputCode;
      break;
    case "escapeCode":
      this.escapeCode;
      break;
    case "indent":
      this.block;
    }
    if (!selfClosing)
      this.buffer("</" + tag + ">");
  },
  get outputCode() {
    this.buffer(this.advance.val, false);
  },
  get escapeCode() {
    this.buffer("escape(" + this.advance.val + ")", false);
  },
  get doctype() {
    var doctype = this.advance.val.trim().toLowerCase() || "default";
    if (doctype in HAML.doctypes)
      this.buffer(HAML.doctypes[doctype].replace(/"/g, "\\\""));
    else
      throw new HamlError("doctype `" + doctype + "' does not exist");
  },
  get conditionalComment() {
    var condition = this.advance.val;
    this.buffer("<!--" + condition + ">");
    this.peek.type === "indent" ? this.block : this.expr;
    this.buffer("<![endif]-->");
  },
  get comment() {
    this.advance;
    this.buffer("<!-- ");
    var buf = this.peek.type === "indent" ? this.block : this.expr;
    this.buffer(" -->");
  },
  get code() {
    var code = this.advance.val;
    if (this.peek.type === "indent") {
      this.buf.push(code);
      this.buf.push("{");
      this.block;
      this.buf.push("}");
      return;
    }
    this.buf.push(code);
  },
  get filter() {
    var filter = this.advance.val;
    if (!(filter in HAML.filters))
      throw new HamlError("filter `" + filter + "' does not exist");
    if (this.peek.type !== "indent")
      throw new HamlError("filter `" + filter + "' expects a text block");
    this.buf.push("HAML.filters." + filter + "(");
    this.buf.push("(function(){");
    this.buf.push("var buf = []");
    this.textBlock;
    this.buf.push("return buf.join(\"\")");
    this.buf.push("}).call(this)");
    this.buf.push(", buf)");
  },
  get iterate() {
    var each = this.advance, key = each.val[1], vals = each.val[2], val = each.val[0];
    if (this.peek.type !== "indent")
      throw new HamlError("'- each' expects a block, but got " + this.peek.type);
    this.buf.push("for (var " + (key || "index") + " in " + vals + ") {");
    this.buf.push("var " + val + " = " + vals + "[" + (key || "index") + "];");
    this.block;
    this.buf.push("}");
  },
  get expr() {
    switch (this.peek.type) {
    case "id":
    case "class":
      this.tokens.unshift({
        type: "tag",
        val: "div"
      });
      return this.tag;
    case "tag":
      return this.tag;
    case "text":
      var buf = [];
      while (this.peek.type === "text") {
        buf.push(this.advance.val.trim());
        if (this.peek.type === "newline")
          this.advance;
      }
      return this.buffer(buf.join(" "));
    case "each":
      return this.iterate;
    case "code":
      return this.code;
    case "escape":
      return this.buffer(this.advance.val);
    case "doctype":
      return this.doctype;
    case "filter":
      return this.filter;
    case "conditionalComment":
      return this.conditionalComment;
    case "comment":
      return this.comment;
    case "escapeCode":
      return this.escapeCode;
    case "outputCode":
      return this.outputCode;
    case "newline":
    case "indent":
    case "outdent":
      this.advance;
      return this.expr;
    default:
      throw new HamlError("unexpected " + this.peek.type);
    }
  },
  get js() {
    this.buf = [
      "with (locals || {}) {",
      "  var buf = [];"
    ];
    while (this.peek.type !== "eof")
      this.expr;
    this.buf.push("  return buf.join(\"\")");
    this.buf.push("}");
    return this.buf.join("\n");
  },
  buffer: function (str, quoted) {
    if (typeof quoted === "undefined")
      var quoted = true;
    if (quoted)
      this.buf.push("  buf.push(\"" + str + "\")");
    else
      this.buf.push("  buf.push(" + str + ")");
  }
};
function escape(str) {
  return String(str).replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
}
function attrs(attrs) {
  var finalAttrs = {}, classes = [], buf = [];
  for (var i = 0, len = attrs.length; i < len; i++)
    for (var attrName in attrs[i])
      if (attrName === "class")
        classes.push(attrs[i][attrName]);
      else
        finalAttrs[attrName] = attrs[i][attrName];
  if (classes.length)
    finalAttrs["class"] = classes.join(" ");
  for (var key in finalAttrs)
    if (typeof finalAttrs[key] === "boolean") {
      if (finalAttrs[key] === true)
        buf.push(key + "=\"" + key + "\"");
    } else if (finalAttrs[key])
      buf.push(key + "=\"" + escape(finalAttrs[key]) + "\"");
  return buf.join(" ");
}
HAML.compile = function (str, options) {
  var parser = new Parser(str, options);
  var fn = new Function("locals, attrs, escape, HAML", parser.js);
  return function (locals) {
    return fn.apply(this, [
      locals,
      attrs,
      escape,
      HAML
    ]);
  };
};
HAML.render = function (str, options) {
  var parser, options = options || {};
  if (options.cache && !options.filename)
    throw new Error("filename option must be passed when cache is enabled");
  return function () {
    try {
      var fn;
      if (options.cache && HAML.cache[options.filename])
        fn = HAML.cache[options.filename];
      else {
        parser = new Parser(str, options);
        fn = Function("locals, attrs, escape, HAML", parser.js);
      }
      return (options.cache ? HAML.cache[options.filename] = fn : fn).call(options.context, options.locals, attrs, escape, HAML);
    } catch (err) {
      if (parser && err instanceof HamlError)
        err.message = "(Haml):" + parser.peek.line + " " + err.message;
      else if (!(err instanceof HamlError))
        err.message = "(Haml): " + err.message;
      if (options.filename)
        err.message = err.message.replace("Haml", options.filename);
      throw err;
    }
  }.call(options.context);
};
HAML.renderFile = function (filename, encoding, options, callback) {
  var fs = require("fs");
  options = options || {};
  options.filename = options.filename || filename;
  options.cache = options.hasOwnProperty("cache") ? options.cache : true;
  if (HAML.cache[filename]) {
    process.nextTick(function () {
      callback(null, HAML.render(null, options));
    });
  } else {
    fs.readFile(filename, encoding, function (err, str) {
      if (err) {
        callback(err);
      } else {
        callback(null, HAML.render(str, options));
      }
    });
  }
};
module.exports = HAML;

return module.exports;

});    return require('haml');
  };
if (__isAMD) {
  return define(bundleFactory);
} else {
    if (__isNode) {
        return module.exports = bundleFactory();
    } else {
        return bundleFactory();
    }
}
}).call(this, (typeof exports === 'object' ? global : window),
              (typeof exports === 'object' ? global : window))
